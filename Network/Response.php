<?php

namespace MKWeb\ImgDB\Network; 

/**
 * Response class
 *
 * the response class contains information about the response
 *
 * it contains the http headers and the body wich is generated by the View class
 *
 * @author Mario Kunz
 */
class Response {

    /**
     * array with HTTP headers
     * @var array
     */
    protected $_headers = array();

    /**
     * String Buffer for HTMl content
     * @var String
     */
    protected $_body = null;


    /**
     * if a String param is given the $_body will be set else
     * it returns the value of $_body
     * @param  String $content html content
     * @return String          value of $_body
     */
    public function body($content = null) {
        if ($content === null) {
            return $this->_body;
        }
        return $this->_body = $content;
    }

    /**
     * sends the response directly o the client
     * @return Response object with the headers
     */
    public function send() {
        $this->sendHeaders();
        return $this;
    }

    /**
     * sends multiple headers to the client
     */
    public function sendHeaders() {
        if (!empty($this->_headers)) {
            foreach($this->_headers as $key => $value) {
                $this->_sendHeader($key, $value);
            }
        }
    }

    /**
     * sends the header form the parameters to the client
     * @param  String $name   name of the header
     * @param  String $value value of the header
     */
    protected function _sendHeader($name, $value) {
        if ($value == null) {
            header($name);
        } else {
            header("{$name}: {$value}");
        }
    }

    /**
     * this method sets a new header for the response object
     * all current headers can be found in the $_headers array
     *
     * @param  String $header name for the header
     * @param  String $value  value for the header
     * @return array         the headers array
     */
    public function header($header = null, $value = null) {
        if ($header === null) {
            return $this->_headers;
        }
        $this->_headers[$header] = trim($value);
        return $this->_headers;
    }

    /**
     * sets a special location header
     * used for redirects
     *
     * @param  String $url
     * @return mixed      null or the location header wich has already set
     */
    public function location($url = null) {
        if ($url === null) {
            $h = $this->header();
            return isset($h['Location']) ? $h['Location'] : null;
        }
        $this->header('Location', $url);
        return null;
    }

}


 ?>
